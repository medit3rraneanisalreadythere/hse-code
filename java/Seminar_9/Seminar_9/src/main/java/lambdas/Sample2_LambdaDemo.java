package lambdas;

import tool.Reflector;

/**
 * Using lambda at assignment context.
 */

@FunctionalInterface
interface MyNumber {
    double getValue();
//    int ququ();
}

public class Sample2_LambdaDemo {
    public static void main(String[] args) {
        Sample2_LambdaDemo myInstance = new Sample2_LambdaDemo();
        myInstance.demo1();
        myInstance.demo2();
        myInstance.demo3();
    }

    public void demo1() {
        MyNumber myNumber = null; // we declare a local variable of MyNumber interface type
        System.out.println(myNumber);

        myNumber = () -> 123.45;
        System.out.println(myNumber); // we assign a value - our lambda expression

        //todo: we have assigned a value of an interface reference type; hence we can analyze its' class:
        Class<?> c = myNumber.getClass();
        System.out.println(c);
        //todo: ... and analyze its' classLoader:
        ClassLoader cLoader = c.getClassLoader();
        System.out.println(cLoader);
        //todo: we can compare it with the classLoader of out own class:
        System.out.println(Sample2_LambdaDemo.class.getClassLoader()); // ok, they are the same...
        assert (cLoader == this.getClass().getClassLoader());

        //todo: can we ask this classLoader provide us with that class by its' name?
        Class<?> cc = getClassByName(c.getName());
        System.out.println(cc); // TODO: note - we cannot get the class by name... Why?
        //todo: let's analyze the class using Reflector:
        Reflector.printClassInfo(c);
        //todo: let's use out interface implementation:
        double value = myNumber.getValue();
        System.out.println(value); // we can get value from the lambda expression...

        System.out.println("--------------------------------------------------------------------------");
        // todo: now reassign the variable:
        myNumber = () -> Math.random() * 100;
        System.out.println("random value * 100 is: " + myNumber.getValue());
        System.out.println("random value * 100 is: " + myNumber.getValue());

        System.out.println(myNumber);
        Class<?> aClass = myNumber.getClass();
        System.out.println(aClass); //todo: is the class the same? It is not...
        // todo: note that class file is not generated by compiler for aClass, but it is present at runtime...

        System.out.println("--------------------------------------------------------------------------");

        myNumber = new MyNumber() {
            @Override
            public double getValue() {
                return Math.random() * 100;
            }
        };
        System.out.println("random value * 100 is: " + myNumber.getValue());
        System.out.println("random value * 100 is: " + myNumber.getValue());

        System.out.println(myNumber);
        System.out.println("myNumber.getClass() = " + myNumber.getClass());

        System.out.println("--------------------------------------------------------------------------");
    }

    void demo2() {
        MyNumber myNumber = createMyNumberImplementation();
        System.out.println(myNumber.getValue());
        System.out.println("--------------------------------------------------------------------------");
    }

    void demo3() {
        double value = calculateValue(() -> 3.14159);
        System.out.println(value);
        System.out.println("--------------------------------------------------------------------------");
    }

    MyNumber createMyNumberImplementation() {
        return () -> 3.14159;
    }
    double calculateValue(MyNumber valueProvider) {
        return valueProvider.getValue() + 1;
    }

    public static Class<?> getClassByName(String className) {
        System.out.println("looking for class by name: " + className);
        Class<?> result = null;
        try {
            result = Class.forName(className);
        } catch (ClassNotFoundException cnfe) {
            System.out.println("got exception: " + cnfe);
        }
        return result;
    }

}
